@page "/"
@using System.Linq;
@using Azure
@using Azure.AI.OpenAI
@using Markdig
@using System.Globalization
@inject IConfiguration configuration
@inject OpenAIClient openAIClient

<PageTitle>My ChatGPT</PageTitle>

<h4>Welcome to my Chat using OpenAI</h4>
@if (warningMessage.Length > 0)
{
    <div class="alert alert-warning">
        <strong>Warning!</strong> @warningMessage.
    </div>
}
<div class="row">
    @foreach (var chat in chat.Messages)
    {
        <h5>@chat.Role</h5>
        @((MarkupString)Markdown.ToHtml(chat.Content))
    }

    @if (!string.IsNullOrEmpty(stream))
    {
        <h5>assistant</h5>
        @((MarkupString)Markdown.ToHtml(stream))
    }
    @if (loading)
    {
        <br />
        <div class="loader"></div>
        <p>... please wait ...</p>
    }
    <hr />
    <div class="col-sm-8">
        <textarea type="text" class="form-control"
                  placeholder="CTRL+Enter to submit search"
                  @bind="next" @bind:event="oninput"
                  @ref=nextArea
                  @onkeydown="@OnNextKeydown" />
    </div>
    <br />
    <div class="col-sm-2">
        <button class="btn btn-danger" @onclick="OnSearchClick" type="submit" disabled=@loading>
            <i class="fas fa-times"></i>Submit
        </button>
    </div>
</div>

@code {
    private ChatCompletionsOptions chat = new ChatCompletionsOptions
        {
            Messages = { new Azure.AI.OpenAI.ChatMessage(ChatRole.System,
            $"You are the assistant of a software engineer mainly working with .NET and Azure. Today is {DateTimeOffset.UtcNow.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture)}.")
            }
        };

    private string warningMessage = string.Empty;
    private string next = string.Empty;
    private string stream = string.Empty;
    private bool loading = true;
    private ElementReference nextArea;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            loading = false;
            this.StateHasChanged();
            await nextArea.FocusAsync();
        }
    }

    public async void OnSearchClick()
    {
        await RunSearch();
    }

    public async void OnNextKeydown(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" && e.CtrlKey)
        {
            await RunSearch();
        }
    }

    public async Task RunSearch()
    {
        try
        {
            loading = true;
            this.StateHasChanged();

            chat.Messages.Add(new Azure.AI.OpenAI.ChatMessage(ChatRole.User, next));

            var res = await openAIClient.GetChatCompletionsStreamingAsync(configuration["OpenAI:DeploymentId"], chat);

            await foreach (var choice in res.Value.GetChoicesStreaming())
            {
                await foreach (var msg in choice.GetMessageStreaming())
                {
                    // We collect response as it comes in and display it immediately
                    stream += msg.Content;
                    this.StateHasChanged();
                }
            }

            chat.Messages.Add(new ChatMessage(ChatRole.Assistant, stream));

            loading = false;
            stream = string.Empty;
            warningMessage = string.Empty;
            next = string.Empty;
        }
        catch (Exception ex)
        {
            warningMessage = ex.Message;
        }
        finally
        {
            loading = false;
            this.StateHasChanged();
        }
    }
}